import os
import asyncio
from dbm import sqlite3

from telebot import TeleBot, types
from telebot.types import Message, CallbackQuery
import tempfile
import logging
from config import ADMIN_IDS, MIN_NFT_PRICE, MAX_NFT_PRICE
from ton_connector import TonConnect
from ton_manager import ton_manager
from nft_creator import NFTCreator
from DataBase import init_database, save_wallet_address, get_wallet_address


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('8429039115:AAFLkJFjhgbpMyva7Kf5fHydDOVIPWdRCdc')
nft_creator = NFTCreator()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


class UserState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        self.waiting_for = None
        self.data = {}

    def set_state(self, state: str, data: dict = None):
        self.waiting_for = state
        if data:
            self.data.update(data)

    def clear_state(self):
        self.waiting_for = None
        self.data = {}


def get_user_state(user_id: int) -> UserState:
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = message.from_user

    welcome_text = f"""
üé® –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å NFT –≤ —Å–µ—Ç–∏ TON!

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å NFT –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ
‚Ä¢ –í—ã—Å—Ç–∞–≤–ª—è—Ç—å NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ TON
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å NFT –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å TON –∫–æ—à–µ–ª—å–∫–∞

üíé –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/connect - –ü–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/create - –°–æ–∑–¥–∞—Ç—å NFT –∏–∑ —Ñ–æ—Ç–æ
/my_nfts - –ú–æ–∏ NFT
/marketplace - –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT
/sell - –ü—Ä–æ–¥–∞—Ç—å NFT
/gift - –ü–æ–¥–∞—Ä–∏—Ç—å NFT

üí∞ –°–æ–∑–¥–∞–Ω–∏–µ NFT –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
    """

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üíé –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫')
    btn2 = types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å')
    btn3 = types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å NFT')
    btn4 = types.KeyboardButton('üì¶ –ú–æ–∏ NFT')
    btn5 = types.KeyboardButton('üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')
    markup.add(btn1, btn2, btn3, btn4, btn5)

    button_text_to_command = {
        'üíé –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫': '/connect',
        'üí∞ –ë–∞–ª–∞–Ω—Å': '/balance',
        'üé® –°–æ–∑–¥–∞—Ç—å NFT': '/create',
        'üì¶ –ú–æ–∏ NFT': '/my_nfts',
        'üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å': '/marketplace'
    }
        
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(commands=['connect'])
def connect_wallet_command(message: Message):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞"""
    help_text = """
üíé –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞:

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞.

üì± –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:
‚Ä¢ EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c
‚Ä¢ UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c

üìã –ö–∞–∫ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
‚Ä¢ @wallet: –ù–∞–∂–º–∏ "Receive" ‚Üí "Copy Address"
‚Ä¢ Tonkeeper: –ù–∞–∂–º–∏ –Ω–∞ QR-–∫–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        
–û—Ç  –ø—Ä–∞–≤—å —Å–≤–æ–π TON –∞–¥—Ä–µ—Å:
     """

    bot.send_message(message.chat.id, help_text)
    get_user_state(message.from_user.id).set_state("waiting_wallet")


@bot.message_handler(commands=['connect_wallet'])
def connect_wallet_new(message: Message):
    """–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TonConnect"""
    ton_connector = TonConnect()
    qr_path = ton_connector.generate_connect_qr(message.from_user.id)

    with open(qr_path, 'rb') as qr_photo:
        bot.send_photo(
            message.chat.id,
            qr_photo,
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR –∫–æ–¥ –≤ —Å–≤–æ–µ–º TON –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n"
                    "‚Ä¢ Tonkeeper\n‚Ä¢ Tonhub\n‚Ä¢ MyTonWallet\n‚Ä¢ OpenMask"
        )


    if os.path.exists(qr_path):
        os.remove(qr_path)



@bot.message_handler(commands=['mint_nft'])
def mint_nft_blockchain(message: Message):
    """–ú–∏–Ω—Ç NFT –≤ –±–ª–æ–∫—á–µ–π–Ω"""
    user_state = get_user_state(message.from_user.id)

    if not user_state.data.get('wallet_connected'):
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ /connect_wallet")
        return

    # –õ–æ–≥–∏–∫–∞ –º–∏–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω
    bot.send_message(message.chat.id, "üîÑ –ú–∏–Ω—Ç NFT –≤ –±–ª–æ–∫—á–µ–π–Ω TON...")


@bot.message_handler(commands=['balance'])
def balance_command(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    wallet_address = get_wallet_address(user_id)

    if not wallet_address:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ TON –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /connect")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ë–î
    try:
        async def get_balance():
            return await ton_manager.get_wallet_info(wallet_address)

        wallet_info = asyncio.run(get_balance())

        balance_text = f"""
üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:

üè¶ –ê–¥—Ä–µ—Å: `{wallet_info['address']}`
üí∞ –ë–∞–ª–∞–Ω—Å: {wallet_info['balance_ton']:.2f} TON
üíµ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: ${wallet_info['balance_usd']:.2f}
üåê –°–µ—Ç—å: {wallet_info['network']}

üí´ –°—Ç–∞—Ç—É—Å: {"üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if wallet_info['is_active'] else "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
        """

        bot.send_message(message.chat.id, balance_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error getting balance: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

@bot.message_handler(commands=['create'])
def create_nft_command(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ NFT"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î, –∞ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    wallet_address = get_wallet_address(user_id)

    if not wallet_address:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ TON –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /connect")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_state = get_user_state(user_id)
    user_state.data['wallet_address'] = wallet_address

    bot.send_message(
        message.chat.id,
        "üé® –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NFT!\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —è –ø–æ–º–æ–≥—É:\n"
        "1. –î–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ NFT\n"
        "2. –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "4. –°–æ–∑–¥–∞—Ç—å NFT –≤ –±–ª–æ–∫—á–µ–π–Ω–µ TON"
    )

    user_state.set_state("waiting_photo")

@bot.message_handler(commands=['my_nfts'])
def my_nfts_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ NFT"""
    user_id = message.from_user.id
    nfts = nft_creator.get_user_nfts(user_id)

    if not nfts:
        bot.send_message(message.chat.id, "üì¶ –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç NFT. –ò—Å–ø–æ–ª—å–∑—É–π /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π!")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ NFT
    markup = types.InlineKeyboardMarkup()

    for nft in nfts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 NFT
        btn_text = f"üé® {nft['name']}"
        if nft.get('for_sale'):
            btn_text += f" üí∞{nft['price_ton']} TON"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"view_nft_{nft['id']}"))

    total_value = sum(nft.get('price_ton', 0) for nft in nfts if nft.get('for_sale'))

    bot.send_message(
        message.chat.id,
        f"üì¶ –¢–≤–æ–∏ NFT ({len(nfts)} —à—Ç.):\n"
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ: {total_value:.2f} TON\n"
        f"–í—ã–±–µ—Ä–∏ NFT –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=markup
    )


@bot.message_handler(commands=['marketplace'])
def marketplace_command(message: Message):
    """–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    bot.send_message(
        message.chat.id,
        "üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å NFT –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
    )


@bot.message_handler(commands=['sell'])
def sell_nft_command(message: Message):
    """–ü—Ä–æ–¥–∞–∂–∞ NFT"""
    user_id = message.from_user.id
    nfts = nft_creator.get_user_nfts(user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º NFT, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
    nfts_for_sale = [nft for nft in nfts if not nft.get('for_sale', False)]

    if not nfts_for_sale:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –≤—Å–µ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã.")
        return

    markup = types.InlineKeyboardMarkup()
    for nft in nfts_for_sale[:5]:
        markup.add(types.InlineKeyboardButton(f"üé® {nft['name']}", callback_data=f"sell_{nft['id']}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=markup)


@bot.message_handler(commands=['gift'])
def gift_nft_command(message: Message):
    """–ü–æ–¥–∞—Ä–æ–∫ NFT"""
    user_id = message.from_user.id
    nfts = nft_creator.get_user_nfts(user_id)

    if not nfts:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç NFT –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.")
        return

    markup = types.InlineKeyboardMarkup()
    for nft in nfts[:5]:
        if not nft.get('for_sale', False):
            markup.add(types.InlineKeyboardButton(f"üé® {nft['name']}", callback_data=f"gift_{nft['id']}"))

    if not markup.keyboard:
        bot.send_message(message.chat.id, "‚ùå –í—Å–µ —Ç–≤–æ–∏ NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –°–Ω–∏–º–∏ —Å –ø—Ä–æ–¥–∞–∂–∏ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å.")
        return

    bot.send_message(message.chat.id, "üéÅ –í—ã–±–µ—Ä–∏ NFT –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=markup)


@bot.message_handler(content_types=['photo'])
def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NFT"""
    user_id = message.from_user.id
    user_state = get_user_state(user_id)

    if user_state.waiting_for != "waiting_photo":
        bot.send_message(message.chat.id, "üì∏ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å NFT, –Ω–∞–∂–º–∏ 'üé® –°–æ–∑–¥–∞—Ç—å NFT'")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
        temp_file.write(downloaded_file)
        temp_path = temp_file.name

    user_state.set_state("waiting_nft_name", {"photo_path": temp_path})
    bot.send_message(message.chat.id, "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è NFT:")


@bot.message_handler(commands=['debug'])
def debug_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    wallet_address = get_wallet_address(user_id)

    debug_text = f"""
üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üë§ User ID: {user_id}
üíº –ö–æ—à–µ–ª–µ–∫ –≤ –ë–î: {wallet_address or '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {_get_users_count()}
    """

    bot.send_message(message.chat.id, debug_text)


def _get_users_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î"""
    try:
        conn = sqlite3.connect('bot_database.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        count = cursor.fetchone()[0]
        conn.close()
        return count
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"



@bot.message_handler(func=lambda message: True)
def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_state = get_user_state(user_id)
    text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    if user_state.waiting_for == "waiting_wallet":
        if ton_manager.validate_wallet_address(text):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            success = save_wallet_address(
                user_id=user_id,
                username=message.from_user.username or f"user_{user_id}",
                wallet_address=text
            )

            if success:
                user_state.data['wallet_address'] = text
                user_state.clear_state()

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                async def get_balance():
                    return await ton_manager.get_wallet_balance(text)

                balance = asyncio.run(get_balance())

                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n"
                    f"üë§ User ID: {user_id}\n"
                    f"üè¶ –ê–¥—Ä–µ—Å: `{text}`\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} TON\n\n"
                    f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å NFT!",
                    parse_mode='Markdown'
                )
                logger.info(f"üí∞ Wallet saved to DB for user {user_id}")
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."
                )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TON –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è NFT
    elif user_state.waiting_for == "waiting_nft_name":
        if len(text) < 2 or len(text) > 50:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return

        user_state.set_state("waiting_nft_description", {"nft_name": text})
        bot.send_message(message.chat.id, "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ NFT:")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è NFT
    elif user_state.waiting_for == "waiting_nft_description":
        if len(text) < 10 or len(text) > 500:
            bot.send_message(message.chat.id, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return

        user_state.set_state("waiting_nft_price", {"nft_description": text})

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö´ –ù–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", callback_data="price_0"))
        markup.add(types.InlineKeyboardButton("üíé 0.5 TON", callback_data="price_0.5"))
        markup.add(types.InlineKeyboardButton("üíé 1 TON", callback_data="price_1"))
        markup.add(types.InlineKeyboardButton("üíé 5 TON", callback_data="price_5"))

        bot.send_message(
            message.chat.id,
            "üíé –£—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–Ω—É –¥–ª—è NFT –∏–ª–∏ –≤—ã–±–µ—Ä–∏ '–ù–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏':\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {MIN_NFT_PRICE} TON\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {MAX_NFT_PRICE} TON",
            reply_markup=markup
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã NFT (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    elif user_state.waiting_for == "waiting_nft_price":
        try:
            price = float(text)
            if price < 0:
                bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return
            if price > 0 and price < MIN_NFT_PRICE:
                bot.send_message(message.chat.id, f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {MIN_NFT_PRICE} TON. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return
            if price > MAX_NFT_PRICE:
                bot.send_message(message.chat.id, f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {MAX_NFT_PRICE} TON. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return

            _create_nft_final(user_id, user_state, price, message.chat.id)

        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = call.from_user.id
    user_state = get_user_state(user_id)

    if call.data.startswith("view_nft_"):
        nft_id = call.data.replace("view_nft_", "")
        nft = nft_creator.get_nft(user_id, nft_id)

        if nft and os.path.exists(nft['image_path']):
            with open(nft['image_path'], 'rb') as photo:
                caption = f"üé® {nft['name']}\nüìù {nft['description']}\nüÜî {nft['id'][:8]}"
                if nft.get('for_sale'):
                    caption += f"\nüí∞ –¶–µ–Ω–∞: {nft['price_ton']} TON"
                else:
                    caption += "\nüí´ –ù–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"

                bot.send_photo(call.message.chat.id, photo, caption=caption)
        else:
            bot.send_message(call.message.chat.id, "‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω")

    elif call.data.startswith("price_"):
        price_str = call.data.replace("price_", "")
        price = 0.0 if price_str == "0" else float(price_str)
        _create_nft_final(user_id, user_state, price, call.message.chat.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith("sell_"):
        nft_id = call.data.replace("sell_", "")
        user_state.set_state("waiting_sell_price", {"nft_id": nft_id})
        bot.send_message(
            call.message.chat.id,
            f"üíé –í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ TON –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ NFT {nft_id[:8]}...\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {MIN_NFT_PRICE} TON"
        )
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith("gift_"):
        nft_id = call.data.replace("gift_", "")
        user_state.set_state("waiting_gift_recipient", {"nft_id": nft_id})
        bot.send_message(
            call.message.chat.id,
            f"üë§ –í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ä–∏—Ç—å NFT {nft_id[:8]}..."
        )
        bot.delete_message(call.message.chat.id, call.message.message_id)


def _create_nft_final(user_id: int, user_state, price: float, chat_id: int):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ NFT"""
    try:
        # –°–æ–∑–¥–∞–µ–º NFT
        nft_data = nft_creator.create_nft(
            user_id=user_id,
            image_path=user_state.data['photo_path'],
            name=user_state.data['nft_name'],
            description=user_state.data['nft_description'],
            price_ton=price
        )

        if nft_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π NFT
            with open(nft_data['image_path'], 'rb') as photo:
                caption = f"üéâ NFT —Å–æ–∑–¥–∞–Ω!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {nft_data['name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {nft_data['description']}"

                if price > 0:
                    usd_price = ton_manager.convert_ton_to_usd(price)
                    caption += f"\nüí∞ –¶–µ–Ω–∞: {price} TON (${usd_price:.2f})"
                else:
                    caption += "\nüí´ –ù–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"

                caption += f"\nüÜî ID: {nft_data['id'][:8]}"

                bot.send_photo(chat_id, photo, caption=caption)

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(user_state.data['photo_path']):
                os.remove(user_state.data['photo_path'])

            user_state.clear_state()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        admin_id,
                        f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π NFT!\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                        f"NFT: {nft_data['name']}\n"
                        f"–¶–µ–Ω–∞: {price} TON"
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin: {e}")

        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT")
            user_state.clear_state()

    except Exception as e:
        logger.error(f"Error in NFT creation: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT")
        user_state.clear_state()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(func=lambda message: message.text == 'üíé –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫')
def connect_button(message: Message):
    connect_wallet_command(message)


@bot.message_handler(func=lambda message: message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
def balance_button(message: Message):
    balance_command(message)


@bot.message_handler(func=lambda message: message.text == 'üé® –°–æ–∑–¥–∞—Ç—å NFT')
def create_nft_button(message: Message):
    create_nft_command(message)


@bot.message_handler(func=lambda message: message.text == 'üì¶ –ú–æ–∏ NFT')
def my_nfts_button(message: Message):
    my_nfts_command(message)


@bot.message_handler(func=lambda message: message.text == 'üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')
def marketplace_button(message: Message):
    marketplace_command(message)

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()

    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ NFT –±–æ—Ç–∞ –¥–ª—è TON...")
    logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    logger.info(f"üíé –°–µ—Ç—å TON: {ton_manager.network}")
    logger.info(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {MIN_NFT_PRICE}-{MAX_NFT_PRICE} TON")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    asyncio.run(ton_manager.init_provider())

    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        asyncio.run(ton_manager.close_provider())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        asyncio.run(ton_manager.close_provider())
