from flask import Flask
import os
import threading
import asyncio
import logging
from dbm import sqlite3
from telebot import TeleBot, types
from telebot.types import Message, CallbackQuery
import tempfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –º–æ–¥—É–ª–∏
from config import ADMIN_IDS, MIN_NFT_PRICE, MAX_NFT_PRICE
from ton_connector import TonConnect
from ton_manager import ton_manager
from nft_creator import NFTCreator
from DataBase import init_database, save_wallet_address, get_wallet_address

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('8429039115:AAFLkJFjhgbpMyva7Kf5fHydDOVIPWdRCdc')
nft_creator = NFTCreator()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class UserState:
    def __init__(self):
        self.waiting_for = None
        self.data = {}

def get_user_state(user_id: int) -> UserState:
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]

# –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–µ—Å—å –≤–∞—à –∫–æ–¥ –∫–æ–º–∞–Ω–¥)
@bot.message_handler(commands=['start'])
def start_command(message: Message):
    user = message.from_user
    welcome_text = f"üé® –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–Ø NFT –±–æ—Ç –¥–ª—è TON —Å–µ—Ç–∏!"
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(commands=['status'])
def status_command(message: Message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!")

# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

# Flask routes
@app.route('/')
def home():
    return "ü§ñ NFT Telegram Bot is running on Render!"

@app.route('/health')
def health():
    return "OK"

@app.route('/stats')
def stats():
    return f"Active users: {len(user_states)}"

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info("ü§ñ Starting Telegram bot...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        asyncio.run(ton_manager.init_provider())
        
        logger.info("‚úÖ Bot initialized, starting polling...")
        bot.infinity_polling()
        
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ Starting web server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
    
